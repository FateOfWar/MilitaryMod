buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        // Make sure this version matches the one included in Kotlin for Forge
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10'
        // OPTIONAL Gradle plugin for Kotlin Serialization
        classpath 'org.jetbrains.kotlin:kotlin-serialization:1.6.10'
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.matthewprenger.cursegradle"
    id "com.modrinth.minotaur"
}

apply from: '../gradle-scripts/publish-curseforge.gradle'

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        mixinConfig "military.mixins.json"
        mixinConfig "military-common.mixins.json"
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }
}

repositories {
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
            runtimeClasspath.extendsFrom common
            developmentForge.extendsFrom common
}

// TODO: function is also in the main gradle build file. do something about that.
static def redirectFollowingDownload(String url, String filename ) {
    while( url ) {
        new URL( url ).openConnection().with { conn ->
            conn.instanceFollowRedirects = false
            url = conn.getHeaderField( "Location" )
            if( !url ) {
                new File( filename ).withOutputStream { out ->
                    conn.inputStream.with { inp ->
                        out << inp
                        inp.close()
                    }
                }
            }
        }
    }
}

// TODO: function is also in the main gradle build file. do something about that.
def urlFile = { String url, String name ->
    def p = new File("${getLayout().buildDirectory.asFile.get()}/download/${name}.jar").absoluteFile
    if (!p.isFile()) {
        p.parentFile.mkdirs()
        redirectFollowingDownload(url, p.absolutePath)
    }
    return files(p.absolutePath)
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    modApi("org.valkyrienskies:valkyrienskies-118-forge:${rootProject.vs2_version}") { transitive = false }

    implementation("org.valkyrienskies.core:api:${rootProject.vs_core_version}")
    implementation("org.valkyrienskies.core:api-game:${rootProject.vs_core_version}")
    implementation("org.valkyrienskies.core:util:${rootProject.vs_core_version}")
    implementation("org.valkyrienskies.core:impl:${rootProject.vs_core_version}")

    implementation urlFile("http://207.180.202.42/alex/builds/meshlib-${meshlib_version}.jar", "meshlib-$meshlib_version")
    forgeRuntimeLibrary shadowCommon(urlFile("http://207.180.202.42/alex/builds/meshlib-${meshlib_version}.jar", "meshlib-$meshlib_version"))

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    // Add Kotlin for Forge.
    implementation 'thedarkcolour:kotlinforforge:3.12.0'
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version, "vs2_version": project.vs2_version.substring(0, project.vs2_version.indexOf('+'))
    }
}

tasks.withType(JavaCompile).configureEach {
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = 17
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
            dependsOn shadowJar
    archiveClassifier.set null
}

jar {
    archiveClassifier.set "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
            from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}