architectury {
    common(rootProject.enabled_platforms.split(","))
}

loom {
    accessWidenerPath = file("src/main/resources/military.accesswidener")
}


// TODO: function is also in the main gradle build file. do something about that.
static def redirectFollowingDownload(String url, String filename ) {
    while( url ) {
        new URL( url ).openConnection().with { conn ->
            conn.instanceFollowRedirects = false
            url = conn.getHeaderField( "Location" )
            if( !url ) {
                new File( filename ).withOutputStream { out ->
                    conn.inputStream.with { inp ->
                        out << inp
                        inp.close()
                    }
                }
            }
        }
    }
}

// TODO: function is also in the main gradle build file. do something about that.
def urlFile = { String url, String name ->
    def p = new File("${getLayout().buildDirectory.asFile.get()}/download/${name}.jar").absoluteFile
    if (!p.isFile()) {
        p.parentFile.mkdirs()
        redirectFollowingDownload(url, p.absolutePath)
    }
    return files(p.absolutePath)
}

dependencies {
    // We depend on fabric loader here to use the fabric @Environment annotations and get the mixin dependencies
    // Do NOT use other classes from fabric loader
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    // Remove the next line if you don't want to depend on the API
    // modApi "me.shedaniel:architectury:${rootProject.architectury_version}"
    modApi("org.valkyrienskies:valkyrienskies-118-common:${rootProject.vs2_version}")

    compileOnly("org.valkyrienskies.core:api:${rootProject.vs_core_version}")
    compileOnly("org.valkyrienskies.core:api-game:${rootProject.vs_core_version}")
    compileOnly("org.valkyrienskies.core:util:${rootProject.vs_core_version}")
    compileOnly("org.valkyrienskies.core:impl:${rootProject.vs_core_version}")

    implementation urlFile("http://207.180.202.42/alex/builds/meshlib-${meshlib_version}.jar", "meshlib-$meshlib_version")

    api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.9.10"
    api "org.jetbrains.kotlin:kotlin-reflect:1.9.10"
}