plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.matthewprenger.cursegradle"
    id "com.modrinth.minotaur"
}

apply from: '../gradle-scripts/publish-curseforge.gradle'

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
            runtimeClasspath.extendsFrom common
            developmentFabric.extendsFrom common
}


// TODO: function is also in the main gradle build file. do something about that.
static def redirectFollowingDownload(String url, String filename ) {
    while( url ) {
        new URL( url ).openConnection().with { conn ->
            conn.instanceFollowRedirects = false
            url = conn.getHeaderField( "Location" )
            if( !url ) {
                new File( filename ).withOutputStream { out ->
                    conn.inputStream.with { inp ->
                        out << inp
                        inp.close()
                    }
                }
            }
        }
    }
}

// TODO: function is also in the main gradle build file. do something about that.
def urlFile = { String url, String name ->
    def p = new File("${getLayout().buildDirectory.asFile.get()}/download/${name}.jar").absoluteFile
    if (!p.isFile()) {
        p.parentFile.mkdirs()
        redirectFollowingDownload(url, p.absolutePath)
    }
    return files(p.absolutePath)
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    modImplementation("net.fabricmc:fabric-language-kotlin:1.10.10+kotlin.1.9.10")

    // Mod menu
    modImplementation("com.terraformersmc:modmenu:3.2.3")
    modImplementation("me.shedaniel.cloth:cloth-config:${cloth_config_version}")

    // Remove the next line if you don't want to depend on the API
    modApi("org.valkyrienskies:valkyrienskies-118-fabric:${rootProject.vs2_version}")

    implementation urlFile("http://207.180.202.42/alex/builds/meshlib-${meshlib_version}.jar", "meshlib-$meshlib_version")
    shadowCommon urlFile("http://207.180.202.42/alex/builds/meshlib-${meshlib_version}.jar", "meshlib-$meshlib_version")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version, "vs2_version": project.vs2_version.substring(0, project.vs2_version.indexOf('+'))
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
            dependsOn shadowJar
    archiveClassifier.set null
}

jar {
    archiveClassifier.set "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
            from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}